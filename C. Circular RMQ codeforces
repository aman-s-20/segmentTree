#include<bits/stdc++.h>
using namespace std;
#define ll long long

// Lazy propagation...
class SGTree {
public:

	vector<ll> seg;
	vector<ll> lazy;
	SGTree(ll n) {
		seg.resize(4 * n + 1);
		lazy.resize(4 * n + 1);

	}

	void build(ll ind, ll low, ll high, ll arr[]) {
		if (low == high) {
			seg[ind] = arr[low];
			return;
		}
		ll mid = (low + high) >> 1;
		build(2 * ind + 1, low, mid, arr);
		build(2 * ind + 2, mid + 1, high, arr);
		seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
	}

	void rangeUpdate(ll ind, ll low, ll high, ll l, ll r, ll val) {
		if (l > r)return; // not possible

		if (lazy[ind] != 0) {  // make sure current node is updated with propagation
			seg[ind] += lazy[ind];
			if (low != high) {
				lazy[2 * ind + 1] += lazy[ind];
				lazy[2 * ind + 2] += lazy[ind];
			}
			lazy[ind] = 0;
		}

		// no overlap  low high l r or  l r low high
		if (low > r || high < l)return ;

		// complete overlap l low high r
		if (low >= l && high <= r) {
			seg[ind] += val;
			if (low != high) {
				lazy[2 * ind + 1] += val;
				lazy[2 * ind + 2] += val;
			}
			return;
		}
		ll mid = (low + high) >> 1;
		rangeUpdate(2 * ind + 1, low, mid, l, r, val);
		rangeUpdate(2 * ind + 2, mid + 1, high, l, r, val);
		seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
	}

	ll rangeQuery(ll ind, ll low, ll high, ll l, ll r) {
		if (l > r)return INT_MAX;

		// propagation
		if (lazy[ind] != 0) {
			seg[ind] += lazy[ind];
			if (low != high) {
				lazy[2 * ind + 1] += lazy[ind];
				lazy[2 * ind + 2] += lazy[ind];
			}
			lazy[ind] = 0;
		}

		// no overlap   l r low high  or low high l r
		if (low > r || high < l)return INT_MAX;

		// complete overlap  l low high r
		if (low >= l && high <= r) {
			return seg[ind];
		}

		ll mid = (low + high) >> 1;
		return min(rangeQuery(2 * ind + 1, low, mid, l, r), rangeQuery(2 * ind + 2, mid + 1, high, l, r));
	}


};


int main() {

	ll n;
	cin >> n;
	ll arr[n];
	for (ll i = 0; i < n; i++) {
		cin >> arr[i];
	}
	SGTree seg1(n);
	seg1.build(0, 0, n - 1, arr);
	ll q;
	cin >> q;

	string str;
	getline(cin, str);

	while (q--) {
		string T;
		getline(cin, str);
		stringstream X(str);

		vector<ll> v;
		ll i = 0;
		while (getline(X, T, ' ')) {
			v.push_back(stoi(T));
		}
		ll l = v[0];
		ll r = v[1];

		// for (auto I : v) {
		// 	cout << I << " ";
		// }
		// cout << "\n";
		if (v.size() == 3) {
			ll val = v[2];
			if (l <= r) {
				seg1.rangeUpdate(0, 0, n - 1, l, r, val);
			}
			else {
				seg1.rangeUpdate(0, 0, n - 1, l, n - 1, val);
				seg1.rangeUpdate(0, 0, n - 1, 0, r, val);
			}
		}
		else {
			if (l <= r) {
				cout << seg1.rangeQuery(0, 0, n - 1, l, r) << "\n";
			}
			else {
				cout << min(seg1.rangeQuery(0, 0, n - 1, l, n - 1),
				            seg1.rangeQuery(0, 0, n - 1, 0, r)) << "\n";
			}


		}

	}



}
