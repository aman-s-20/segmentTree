#include<bits/stdc++.h>
using namespace std;

class SGTree {
public:
	vector<int> seg;
	SGTree(int n) {
		seg.resize(4 * n + 1);

	}


	// start =1 xor
	// start =0 OR
	void build(int ind, int low, int high, int arr[], int start) {
		if (low == high) {
			seg[ind] = arr[low];
			return;
		}

		int mid = (low + high) >> 1;
		build(2 * ind + 1, low, mid, arr, start ^ 1);
		build(2 * ind + 2, mid + 1, high, arr, start ^ 1);

		if (start == 1)seg[ind] = seg[2 * ind + 1] ^ seg[2 * ind + 2];
		else seg[ind] = seg[2 * ind + 1] | seg[2 * ind + 2];
	}

	// int query(int ind, int low, int high, int l, int r, int start) {
	// 	// no overlap
	// 	// l r low high  or low high l r
	// 	if (r < low || high < l)return INT_MAX;

	// 	// complete overlap
	// 	// l low high r
	// 	if (low >= l && high <= r)return seg[ind];

	// 	int mid = (low + high) >> 1;
	// 	int left = query(2 * ind + 1, low, mid, l, r, start ^ 1);
	// 	int right = query(2 * ind + 2, mid + 1, high, l, r, start ^ 1);
	// 	if (start == 1 )return left ^ right;
	// 	else return left | right;
	// }

	void update(int ind, int low, int high, int i, int val, int start) {
		if (low == high) {
			seg[ind] = val;
			return ;
		}

		int mid = (low + high) >> 1;
		if (i <= mid) update(2 * ind + 1, low, mid, i, val, start ^ 1);
		else update(2 * ind + 2, mid + 1, high, i, val, start ^ 1);
		if (start == 1)seg[ind] = seg[2 * ind + 1] ^ seg[2 * ind + 2];
		else seg[ind] = seg[2 * ind + 1] | seg[2 * ind + 2];
	}
};


int main() {

	int n, m;
	cin >> n >> m;
	n = 1 << n;
	SGTree seg1(n);
	int arr[n];
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	seg1.build(0, 0, n - 1, arr, (n & 1) ? 0 : 1);
	while (m--) {
		int i, val;
		cin >> i >> val;
		i--;
		seg1.update(0, 0, n - 1, i, val, (n & 1) ? 0 : 1);
		cout << seg1.seg[0] << "\n";
	}

}
