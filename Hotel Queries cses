#include<bits/stdc++.h>
using namespace std;
#define ll long long


class Pair {
public:
	int val;
	int index;
};
class SGTree: public Pair {
public:

	vector<Pair> seg;
	// vector<ll> lazy;
	SGTree(ll n) {
		seg.resize(4 * n + 1);
		// lazy.resize(4 * n + 1);

	}

	void build(ll ind, ll low, ll high, ll arr[]) {
		if (low == high) {
			seg[ind].val = arr[low];
			seg[ind].index = low + 1;
			return;
		}
		ll mid = (low + high) >> 1;
		build(2 * ind + 1, low, mid, arr);
		build(2 * ind + 2, mid + 1, high, arr);
		if (seg[2 * ind + 1].val > seg[2 * ind + 2].val) {
			seg[ind] = seg[2 * ind + 1];
		}
		else {
			seg[ind] = seg[2 * ind + 2];
		}

	}

	Pair query(int ind, int low, int high, int value) {
		if (seg[ind].val < value)return {0, 0};
		if (low == high) {
			seg[ind].val -= value;
			return seg[ind];
		}

		int mid = (low + high) >> 1;

		if (seg[2 * ind + 1].val >= value) {
			auto idx = query(2 * ind + 1, low, mid, value);

			// before subtracting the value you should update it first
			if (seg[2 * ind + 1].val > seg[2 * ind + 2].val) {
				seg[ind] = seg[2 * ind + 1];
			}
			else {
				seg[ind] = seg[2 * ind + 2];
			}
			return idx;
		}
		else {
			auto idx = query(2 * ind + 2, mid + 1, high, value);
			if (seg[2 * ind + 1].val > seg[2 * ind + 2].val) {
				seg[ind] = seg[2 * ind + 1];
			}
			else {
				seg[ind] = seg[2 * ind + 2];
			}
			return idx;
		}

	}


};


int main() {

	ll n, m;
	cin >> n >> m;
	ll arr[n];
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	SGTree seg1(n);
	seg1.build(0, 0, n - 1, arr);
	// for (int i = 0; i < 4 * n; i++) {
	// 	cout << seg1.seg[i].val << " " << seg1.seg[i].index << "\n";
	// }
	// cout << endl;
	for (int i = 0; i < m; i++) {
		int x;
		cin >> x;
		cout << seg1.query(0, 0, n - 1, x).index << "\n";
	}



}
