/*  एक ही नारा एक ही नाम जय श्री राम -जय श्री राम  */
#include<bits/stdc++.h>
using namespace std;
#define ll long long



class SGTree {
public:
	class Node {
	public:
		ll sum;
		ll mxPreSum;
	};
	vector<Node> seg;
	SGTree(ll n) {
		seg.resize(4 * n + 1);
	}
	void merge(ll ind) {
		seg[ind].sum = seg[2 * ind + 1].sum + seg[2 * ind + 2].sum;
		seg[ind].mxPreSum = max(seg[2 * ind + 1].mxPreSum, seg[2 * ind + 1].sum + seg[2 * ind + 2].mxPreSum);
	}

	void build(ll ind, ll low, ll high, ll arr[]) {
		if (low == high) {
			seg[ind].sum = seg[ind].mxPreSum = arr[low];
			return ;
		}
		ll mid = (low + high) >> 1;
		build(2 * ind + 1, low, mid, arr);
		build(2 * ind + 2, mid + 1, high, arr);
		merge(ind);
	}

	void update(ll ind, ll low, ll high, ll i, ll val) {
		if (low == high) {
			seg[ind].sum = seg[ind].mxPreSum = val;
			return ;
		}
		ll mid = (low + high) >> 1;
		if (i <= mid)update(2 * ind + 1, low, mid, i, val);
		else update(2 * ind + 2, mid + 1, high, i, val);
		merge(ind);

	}

	Node query(ll ind, ll low, ll high, ll l, ll r) {
		if (low > r || high < l) {
			Node temp;
			temp.mxPreSum = temp.sum = 0;
			return temp;
		}
		if (low >= l && high <= r)return seg[ind];


		ll mid = (low + high) >> 1;
		Node left = query(2 * ind + 1, low, mid, l, r);
		Node right = query(2 * ind + 2, mid + 1, high, l, r);
		Node res;
		res.sum = left.sum + right.sum;
		res.mxPreSum = max(left.mxPreSum, left.sum + right.mxPreSum);
		return res;
	}

};

int main() {

	ll n, m, i, j, k;
	cin >> n >> k;
	ll arr[n];
	for (ll i = 0; i < n; i++) {
		cin >> arr[i];
	}
	SGTree seg1(n);
	seg1.build(0, 0, n - 1, arr);
	while (k--) {
		ll ty, x, y;
		cin >> ty >> x >> y;
		x--;
		if (ty == 1) {
			seg1.update(0, 0, n - 1, x, y);
		}
		else {
			cout << max(0ll, seg1.query(0, 0, n - 1, x, --y).mxPreSum) << "\n";
		}
	}






}

